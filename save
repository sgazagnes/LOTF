std::vector< std::vector < MCTrackObject* >* > *MC_Tracks = MCTrackPoints(*Hit_coords);
  
  // Write event info to output  
  WriteEventPlotsToFile( (*Hit_coords), Out_Put_File);
  
  // Create an empty grid object
  CoordGrid gr;
  
  // Init Grid for STT detector nodes (fill the map).
  gr.Initialize(detNodes);

  //_______________________ Extending the grid with virtual nodes __________
  TNtuple Layers("LayerLimits","Layer Limits.","x:y:det_z:z");
  TNtuple Sections("SectionsLimits","Section Limits.","x:y:det_z:z");
  // Isolate Sector and Layer Limits
  isolateSectorAndLayerLimits(gr, Sections, Layers);
  Sections.Write();
  Layers.Write();

  // Collect points in the original grid
  TNtuple* OrigGrid = GridToNtuple(detNodes, "OrigGridCoord");
  OrigGrid->SetMarkerStyle(8);
  OrigGrid->SetMarkerSize(0.2);
  OrigGrid->SetMarkerColor(kBlack);
  OrigGrid->Write();

  /*
   * Add virtual nodes to the tubes grid. Virtual nodes between layers
   * with different slopes.
   */
   std::cout << "<INFO> Fix neighbouring before extension.\n";
  fixNeighboring(gr);
  std::vector < GridNode > VNodes;
  ///Compute_Add_VirtualNodes_Neigbor2(gr, VNodes);// Old method
  Compute_Add_VirtualNodes_Neigbor(gr, VNodes);
  
  // Collect and write virtual nodes to the output file
  TNtuple* virtualTubes = GridToNtuple(VNodes, "VirtualNodes");
  virtualTubes->SetMarkerStyle(8);
  virtualTubes->SetMarkerSize(0.2);
  virtualTubes->SetMarkerColor(kMagenta);
  virtualTubes->Write();
    
  //_________________ EXtend the grid with virtual nodes _________
  /* 
   * Extend the grid with new virtual points and fix the missing
   * neighboring relations
   */
  // Extend the grid by virtual nodes between the layer.
  std::cout << "<INFO> Extending the grid by " << VNodes.size()
	    << " virtual nodes between the layers.\n";
  gr.ExtendedGrid(VNodes);

  //______________________________________
  /*
   * We need to fix neigboring in case of using neigbor based grid
   * extension. Note: This procedure fixes only the missing symmetric
   * neighborhood issues. This must be done, because the grid is
   * extended by virtuals and the parent nodes do not have the
   * virtuals in their neighbour list.
   */
  std::cout << "<INFO> Fix neighbouring after extension.\n";
  fixNeighboring(gr);

  // Collecte and write
  TNtuple* extendedGrid = GridToNtuple(gr.m_grid, "ExtendedGrid");
  extendedGrid->SetMarkerStyle(7);//8
  extendedGrid->SetMarkerSize(0.3);
  extendedGrid->SetMarkerColor(17);//41
  extendedGrid->Write();

  std::cout << "<INFO> Total number of tubes after extension = "
	    << gr.GetNumNodes() << ".\n";
  
  // Delete allocated memory
  delete (OrigGrid);
  delete virtualTubes;
  delete extendedGrid;
  //___________ Done extending the grid _______________
 
 //___________________________________________________________________
   size_t NumOrientations = 0;
  size_t NumConnComp = 0;
  std::vector<float> OrientationsList;
  
  OrientationsList.push_back(0.0/tol);
  // OrientationsList.push_back(0.2/tol);
  //OrientationsList.push_back(0.4/tol);
  OrientationsList.push_back(0.6/tol);
  //OrientationsList.push_back(0.8/tol);
  //OrientationsList.push_back(1.0/tol);
  OrientationsList.push_back(1.2/tol);
  //OrientationsList.push_back(1.4/tol);
  //OrientationsList.push_back(1.6/tol);
  //OrientationsList.push_back(1.8/tol);
  OrientationsList.push_back(1.9/tol);
  //OrientationsList.push_back(2.0/tol);
  //OrientationsList.push_back(2.2/tol);
  //OrientationsList.push_back(2.4/tol);
  //OrientationsList.push_back(2.6/tol);
  //OrientationsList.push_back(2.8/tol);
  //OrientationsList.push_back(3.0/tol);
  //OrientationsList.push_back(3.1/tol);
  
  //OrientationsList.push_back(0.3/tol);
  // OrientationsList.push_back(0.5/tol);
  // OrientationsList.push_back(0.7/tol);
  //OrientationsList.push_back(0.9/tol);
  // OrientationsList.push_back(1.1/tol);
  // OrientationsList.push_back(1.3/tol);
  //OrientationsList.push_back(1.5/tol);
  // OrientationsList.push_back(1.7/tol);
  // OrientationsList.push_back(1.9/tol);
  //OrientationsList.push_back(2.1/tol);
  // OrientationsList.push_back(2.3/tol);
  // OrientationsList.push_back(2.5/tol);
  //OrientationsList.push_back(2.7/tol);
  // OrientationsList.push_back(2.9/tol);
  
   std::sort(OrientationsList.begin(), OrientationsList.end());

  unsigned int totalnumEvt = Hit_coords->size();
  // Start the timer.
  timer.Start();

  /* Fill the grid with the current hit points and process. Handles
     each event separately.*/
  // Event loop
    for(size_t k = 0; k < Hit_coords->size(); ++k) {
    // Data for the current event
    std::cout << "\n\t<INFO> Processing event: " << k
	      << "\n\n";
    std::vector<HitCoordinate*> const *dd = 0;
    dd = Hit_coords->at(k);
    if(dd) {
      gr.FillGrid(*dd);
    }
    // gr.WriteGrid("eventGridDump.txt");

    //____ Perform Attribute space connected component analysis.
    std::vector< std::set<int>* >* connectedComp = 0;
    
    /* _____ Determine orientations by pre-sensing the grid. */
    //NumOrientations = computeSoftOrienAttributes(gr, lambda, tol, gapSizeInput);
    
    /* ___ Compute orientation based attribute space. Soft */
    //NumOrientations = computeSoftOrienAttributes(gr, lambda, tol, gapSizeInput, &OrientationsList);

    /*
     * Connected components in Attribute Space (Slow but works, needs
     * to be changed to allow overlaps and shared nodes)
     */
    // connectedComp = AttSpaceConnectedComp(gr, MinResponce);
    
    /* ____ Compute orientation attribute layer based */
    // ONLY One layer at a time is processed
    
    // Orientation attr. Alternative method.
    ////// compOrientAttLayerBased_Alt(gr, tol, true);
    
    // Outer -> Inner
  compOrientAttLayerBased_Local(gr, lambda, tol, gapSizeInput, true);
    
    // Inner-> Outer
    //// compOrientAttLayerBased_Local(gr, lambda, tol, gapSizeInput, false);

    // Determine connected components
    connectedComp = AttSpaceConCompLayerBasedSoft(gr, MinResponce);

    //////========== Does not need pre-determined orientations( Work Todo) ====
    // connectedComp = ConCompLayerBasedLocalOrient(gr,  tol);

    // Set the number of connected components (used for plots)
    NumConnComp = connectedComp->size();

    // Print Info
    std::cout << "<INFO> Number of connected components: " << NumConnComp
	      << '\n';

    // If evaluate the error
#if(EVALUATE_ERROR > 0)
    // Determine the segmentation error. Based on total area.
    MCMatchingError *MC_match_error =
      MatchMCTracksWithConnectedComponents(MC_Tracks->at(k), connectedComp);
      
    ErrorNtuple.Fill(MC_match_error->Error_underMerge,
		     MC_match_error->Error_overMerge,
		     MC_match_error->TotalError,
		     MC_match_error->Error_underMergeNorm,
		     MC_match_error->Error_overMergeNorm,
		     MC_match_error->TotalErrorNorm);

    delete MC_match_error;
    // FIXME This prcedure is not complete yet It returns 0 (intentionaly).
    /* Evaluate error per track. Start from MC-Tracks and match to
       components. */
   std::vector < MCTrackObject* > *mcTracksCurrentEvent = MC_Tracks->at(k);
    // SOrt MC tracks increasing length
    std::sort(mcTracksCurrentEvent->begin(), mcTracksCurrentEvent->end(), greaterThanLength);
    std::vector< MCMatchingErrorStruct* > *match_error2 =
      MatchPerTrackWithMCTracks(gr, mcTracksCurrentEvent, connectedComp);
    if(match_error2 != 0) {
      for(size_t f = 0; f < match_error2->size(); ++f) {
        MCMatchingErrorStruct const *erObj = match_error2->at(f);
        ErrorNtuplePerTrack.Fill(static_cast<float>(erObj->isNotmatched),
                                 static_cast<float>(erObj->BestMatchMCLength),
                                 static_cast<float>(erObj->CurrentTrackLength),
                                 static_cast<float>(erObj->MCMinCurrentLength),
                                 static_cast<float>(erObj->CurrentMinMCLength),
                                 erObj->Error_underMerge,
                                 erObj->Error_overMerge,
                                 erObj->MC_a, erObj->MC_b, erObj->MC_r,
                                 erObj->MC_E, erObj->tr_a, erObj->tr_b,
                                 erObj->tr_r, erObj->tr_E);
      }//
      // Clean memory for now. Maybe better to put all lists in a main
      // list and fill the ntuple later.(HINT FIXME later)
      for(size_t r = 0; r < match_error2->size(); ++r) {
        delete match_error2->at(r);
      }
      delete match_error2;
    }
#endif// END (EVALUATE_ERROR > 0)
    //_________________ Merge tracks with MVD components (Tracklets).
    // (This does not work yet.)
    std::vector<TrackObject*>* MVDMergedTraks = MergeConnectedComponentsWithMVD(gr, connectedComp);

    //__________________ Determind eth Z-coordinate values.
    TrackZ_CoordinatesDistNorm(gr, MVDMergedTraks);

    //__________________ Collect component details _________________  
#if(WRITE_CONNECTED_COMPONENTS > 0)
    // First: event number
    // Second: number of components
    ComponentPerEvt.Fill(k, NumConnComp);
    // Collect connected components
    std::vector< GridNode > const &Ingrid = gr.m_grid;
    // Store the data for each constructed component
    for(size_t cm = 0 ; cm < connectedComp->size(); ++cm) {
      std::set<int> const* idset = connectedComp->at(cm);
      if(!idset){
	continue;
      }
      std::set<int>::iterator it;
      for( it = idset->begin(); it != idset->end(); ++it) {
     	int detID = *it;// Id of the current detector
     	int d_Index = gr.Find(detID);// Index in the grid
     	GridNode const &node = Ingrid[d_Index];	
#if(EXCLUDE_STTSKEWED_PLOT > 0)
	if( node.m_type != GridNode::STT_TYPE_SKEW ) {
#elif (EXCLUDE_VIRTUALS_IN_PLOT > 0)
          //if( node.m_type != GridNode::VIRTUAL_NODE) {// This needs to be done(FIXME)
#pragma message ("Excluding skewed or virtuals")
          //#warning "Excluding skewed or virtuals"
#endif
	  // k = event number, cm = component number,....
          ConnectedCoord.Fill(k, cm, node.m_detID, node.m_x, node.m_y, node.m_z,
                              node.m_xDet, node.m_yDet, node.m_z_Det);
#if( (EXCLUDE_STTSKEWED_PLOT > 0) || (EXCLUDE_VIRTUALS_IN_PLOT > 0) )
        }// END IF skewed
#endif
      }// END FOR it = 
      if( idset->size() < MinResponce) {
	std::cout << "<WARNING> index = " << cm << " size = " << idset->size()
		  << " With IDs = ";
	for( it = idset->begin(); it != idset->end(); ++it) {
	  std::cout << *it << ", ";
	}
	std::cout << '\n';
      }
    }	
#endif//(WRITE_CONNECTED_COMPONENTS > 0)
      
    // Collect data for the current event into "coord" to write after
    // modifications (filtering).
    CollectGridToTree(gr, coord);
    
    // Reset grid for the next event.
    gr.ResetGrid();
    
    // Clean connected components
    if(connectedComp != 0) {
      for(size_t c = 0; c < connectedComp->size(); ++c) {
        delete connectedComp->at(c);
      }
      delete connectedComp;
    }
    // Clean mvdMerged structure
    if(MVDMergedTraks != 0) {
      for(size_t i = 0; i < MVDMergedTraks->size(); ++i) {
        delete (MVDMergedTraks->at(i));
      }
      delete MVDMergedTraks;
    }
    // End cleaning
    // GO to next event
  }//End of event loop
  timer.Stop();
  
  // Write connected components for all events
  ComponentPerEvt.Write();
  ConnectedCoord.Write();
  
  // Write coordinates ntuple
  coord.Write();
  
  //Write error estimations.
  ErrorNtuple.Write();
  ErrorNtuplePerTrack.Write();
  
  // Close open file (wel zo netjes)
  Out_Put_File.Close();
  //_________________________________________________________________
  //_______ Clean allocated memory
  for(size_t i = 0; i < Hit_coords->size(); ++i) {
    std::vector<HitCoordinate*>* dd = (*Hit_coords)[i];
    for(size_t j = 0; j < dd->size(); ++j) {
      delete dd->at(j);
    }
    delete (*Hit_coords)[i];
  }
  Hit_coords->clear();
 
  for(size_t j = 0; j < MC_Tracks->size(); ++j) {
    std::vector < MCTrackObject* >* MCtracksDel = MC_Tracks->at(j);
    for(size_t k = 0; k < MCtracksDel->size(); ++k) {
      delete MCtracksDel->at(k);
    }
    delete (MC_Tracks->at(j));
  }
  delete MC_Tracks;
  //______________ Running Time information ____________
  
  Double_t rtime = timer.RealTime();
  Double_t ctime = timer.CpuTime();
  std::cout <<"=======================================\n"
            << "Macro finished succesfully.\n"
            << "Real time " << (rtime/totalnumEvt)
	    << " (s/Event), CPU time " << (ctime/totalnumEvt)
            << " (s/Event).\n"
            << "plength = " << plength
            << ", area = " << area
            << ", Num of orientations = " << NumOrientations
            << ", lambda = " << lambda
            << ", tolerance = " << tol
            << '\n';