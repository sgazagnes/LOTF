/*************************************
 * Author: M. Babai (M.Babai@rug.nl) *
 * Version:                          *
 * License:                          *
 *************************************/
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
///////////////////////
#include "TNtuple.h"
#include "TFile.h"
#include "TCanvas.h"
#include "TH2.h"
#include "TH3.h"
// > 0 means create,
#define CREATE_SEPARATE_PLOTS 1

int selectCompColour(size_t compNum, size_t numColours) {
  // Set colours per component.
  int setColor = compNum % numColours;
  int color = 1;
  switch (setColor) {
  case 0:
    color = 632;
    break;
  case 1:
    color =  8;
    break;
  case 2:
    color = 600;
    break;
  case 3:
    color = 805;
    break;
  case 4:
    color = 616;
    break;
  case 5:
    color = 432;
    break;
  case 6:
    color = 400;
    break;
  case 7:
    color = 880;
    break;
    //case 6:
  default:
    color = 860;
  }
  return color;
}
/*
 * Infile contains the ntuples
 * evtNum is the event number from which we want to draw the results.
 */
void CreatePlotAllEventComponents(std::string const &InoutFile = "Tracks_output.root",
				  std::string const &dirName   = "PlotsCanvas",
				  Double_t const ww = 1100.00,
				  Double_t const hh = 1100.00,
				  size_t  const dim = 2,
				  size_t evtNum = 0)
{
  TFile inp(InoutFile.c_str(),"UPDATE");

  TNtuple* Poss   = (TNtuple*) inp.Get("Pos");
  TNtuple* MCposs = (TNtuple*) inp.Get("MCpos");
  TNtuple *Virt = (TNtuple*) inp.Get("VirtualNodesLayer");
  // Polar coordinates.
  TNtuple* MCposPolar = (TNtuple*) inp.Get("MCposPolar");
  TNtuple* PosPolar   = (TNtuple*) inp.Get("PosPolar");
  TNtuple *ErrorPT = (TNtuple*) inp.Get("PerTrackError");

  Poss->AddFriend("MCpos");

  PosPolar->AddFriend("MCposPolar");

  // Get number of components for the current event
  float numComponents;

  TTree* EvtNumComps = (TTree*) inp.Get("ComponentPerEvt");
  EvtNumComps->SetBranchAddress("numComponents", &numComponents);

  EvtNumComps->GetEntry(evtNum);
  unsigned int nComp = static_cast<unsigned int>(numComponents);

  // Fetch data and make plots
  TNtuple* grid = (TNtuple*) inp.Get("ExtendedGrid");
  int numColours = 8;
  int color = 1;
  grid->SetMarkerSize(0.3);
  // Change to directory with input events
  inp.cd("InputEvents");

  std::stringstream evN;
  std::string tupName = "Evt";
  evN << evtNum;
  tupName = tupName + "_" + evN.str() + "_CoordsTuple";
  tupName = "InputEvents/" + tupName;

  // float *trackID;
  float_t id;
  std::vector< int > idtracks;
 
  TTree* tracknum = (TTree*) inp.Get(tupName.c_str());
  TBranch *bpx = tracknum->GetBranch("trackID");
  bpx->SetAddress(&id);
  
  Int_t nevent = (Int_t)tracknum->GetEntries();
  for (Int_t i=0;i<nevent;i++) {    
    bpx->GetEntry(i); //read branch fTracks.fPx
 
    // printf("cur track=%f \n",id);
    int intid =  static_cast<unsigned int>(id);
    if(!(std::find(idtracks.begin(), idtracks.end(), intid) != idtracks.end()))
      	idtracks.push_back(intid);

  }

  float_t idt;
  float_t comp;

  std::vector< int > idMatch;

  //TTree* tracknum = (TTree*) inp.Get(tupName.c_str());
  TBranch *bpxx = ConComps->GetBranch("bestIdx");
  TBranch *bpxxx = ConComps->GetBranch("CompNum");

  bpxx->SetAddress(&idt);
  bpxxx->SetAddress(&comp);

  int lastcc = -1;
  nevent = (Int_t)ConComps->GetEntries();
  for (Int_t i=0;i<nevent;i++) {    
    bpxx->GetEntry(i); //read branch fTracks.fPx
    bpxxx->GetEntry(i); //read branch fTracks.fPx

    // printf("ntracks=%f \n",id);
    int curcomp = static_cast<unsigned int>(comp);
    // printf("Comp %d\n",curcomp);

    if(curcomp != lastcc){
      int intidm =  static_cast<unsigned int>(idt);
      printf("%d\n",intidm);
      idMatch.push_back(intidm);

      lastcc = curcomp;
    }

     //  if(!(std::find(idtracks.begin(), idtracks.end(), intid) != idtracks.end()))
      //	idtracks.push_back(intid);
  }

 printf("%d\n", idtracks.size());

  
  TNtuple* pos = (TNtuple*) inp.Get(tupName.c_str());

  
  // Create and set the canvas name and properties
  std::string canvasName = "Event_" + evN.str() + "_PlotCanvas";
  std::string descr = "All Collected Coordinates Event " + evN.str();

  // TCanvas *c1 = new TCanvas(canvasName.c_str(), descr.c_str(), ww, hh );

  int marker = 0;
  int badmarker = 24;

  //_____________ BEGIN TEMPORARY PLOTS May be DELETED
#if(CREATE_SEPARATE_PLOTS > 0)
  {
    // Connected components
    TCanvas *c2 = new TCanvas("c2", "Connected Components", 300, 300 );
    grid->Draw("y:x","","");
    TH2F *htemp = (TH2F*)gPad->GetPrimitive("htemp");
    htemp->GetXaxis()->SetTitle("x [cm]");
    htemp->GetYaxis()->SetTitle("y [cm]");
    htemp->SetTitle("");
    std::stringstream EeventNumString;
    EeventNumString << evtNum;
    std::string ePlotCondition;
    for(size_t j = 0; j < nComp; j++) {
      std::stringstream ecomponentNumber;
      ecomponentNumber << j;
      // Set marker and colours per component.
      int idmctr = idMatch[j];
      marker = 20;//(j % 34);

      if(idmctr != -1)
	color = selectCompColour(idmctr, numColours);
      else{
	color = 1;
	marker = badmarker++;
      }
      ConComps->SetMarkerColor(color);
      //if( marker < 20) { marker += 20; }
      //if( marker > 34) { marker = 34; }
      ConComps->SetMarkerStyle(marker);
      ConComps->SetMarkerSize(0.8);
      // Conditions
      ePlotCondition  = "(EvtNum == "  + EeventNumString.str() + ") && ";
      ePlotCondition += "(CompNum == " + ecomponentNumber.str() + ")";
      ConComps->Draw("y_Det:x_Det", ePlotCondition.c_str(), "same");
    }
    c2->Update();
    c2->SaveAs("myalgo_cm_xy.png");

    }
  // Z-reconstructed Connected components
   {
    TCanvas *c3 = new TCanvas("c3", "Conn.Comp. With Z", 300, 300 );
    grid->Draw("y:z","","");
    TH2F *htemp = (TH2F*)gPad->GetPrimitive("htemp");
    htemp->GetXaxis()->SetTitle("z [cm]");
    htemp->GetYaxis()->SetTitle("y [cm]");
    htemp->SetTitle("");
    std::stringstream EeventNumString;
    EeventNumString << evtNum;
    std::string ePlotCondition;
    for(size_t j = 0; j < nComp; j++) {
      std::stringstream ecomponentNumber;
      ecomponentNumber << j;
      // Set marker and colours per component.
      marker = 20;//(j % 34);
      int idmctr = idMatch[j];
      //printf("Id match MC %d \n", idmctr);
      if(idmctr != -1)
	color = selectCompColour(idmctr, numColours);
      else{
	color = 1;
	marker = badmarker++;
      }
      ConComps->SetMarkerColor(color);
      //  marker = 20;//(j % 34);
	//  if( marker < 20) { marker += 20; }
	// if( marker > 34) { marker = 34; }
      ConComps->SetMarkerStyle(marker);
      ConComps->SetMarkerSize(0.8);
      // Conditions
      ePlotCondition  = "(EvtNum == "  + EeventNumString.str() + ") && ";
      ePlotCondition += "(CompNum == " + ecomponentNumber.str() + ")";
      ConComps->Draw("y_Det:z_Det", ePlotCondition.c_str(), "same");
    }
    c3->Update();
    c3->SaveAs("myalgo_cm_z.png");

    }
   
  // MC data plots.
  {
    TCanvas *c4 = new TCanvas("c4", "MC-Plot", 300, 300 );
    grid->Draw("y:x","","");
    TH2F *htemp = (TH2F*)gPad->GetPrimitive("htemp");
    htemp->GetXaxis()->SetTitle("x [cm]");
    htemp->GetYaxis()->SetTitle("y [cm]");
    htemp->SetTitle("");
    std::stringstream EeventNumString;
    EeventNumString << evtNum;
    std::string ePlotCondition;
    for(size_t j = 0; j < idtracks.size(); j++) {
      std::stringstream ecomponentNumber;
      ecomponentNumber << idtracks[j];
      int idmctr = idtracks[j];
      printf("%d\n", idmctr);

      color = selectCompColour(idmctr, numColours);
      // printf("%d, %d\n", j, color);

      pos->SetMarkerColor(color);
      marker = 20;//(j % 34);
      // if( marker < 20) { marker += 20; }
      //if( marker > 34) { marker = 34; }
      pos->SetMarkerStyle(marker);
      pos->SetMarkerSize(0.8);
      ePlotCondition  = "(EvtNum == "  + EeventNumString.str() + ") && ";
      ePlotCondition += "(trackID == " + ecomponentNumber.str() + ") && my > -10000";
      pos->Draw("my:mx",ePlotCondition.c_str(),"same");
    }
    c4->Update();
     c4->SaveAs("MC_xy.png");

  }
  // Read data
   {
    TCanvas *c5 = new TCanvas("c5", "Read-Plot", 300, 300 );
    grid->Draw("y:x","","");
    TH2F *htemp = (TH2F*)gPad->GetPrimitive("htemp");
    htemp->GetXaxis()->SetTitle("x [cm]");
    htemp->GetYaxis()->SetTitle("y [cm]");
    htemp->SetTitle("");
    std::stringstream EeventNumString;
    EeventNumString << evtNum;
    std::string ePlotCondition;
    for(size_t j = 0; j < idtracks.size(); j++) {
      std::stringstream ecomponentNumber;
      ecomponentNumber << idtracks[j];
      color = selectCompColour(j, numColours);
      pos->SetMarkerColor(color);
      marker = 20;//(j % 34);
      // if( marker < 20) { marker += 20; }
      //if( marker > 34) { marker = 34; }
      pos->SetMarkerStyle(marker);
      pos->SetMarkerSize(0.8);
      ePlotCondition  = "(EvtNum == "  + EeventNumString.str() + ") && ";
      ePlotCondition += "(trackID == " + ecomponentNumber.str() + ") && my > -10000";
      pos->Draw("y:x",ePlotCondition.c_str(),"same");
    }
    c5->Update();
    // c5->SaveAs("Read_xy.pdf");

  }
  // MC in Z-coordinate
  {
    TCanvas *c6 = new TCanvas("c6", "MC_Z_Plot", 300, 300 );
    grid->Draw("y:z","","");
    TH2F *htemp = (TH2F*)gPad->GetPrimitive("htemp");
    htemp->GetXaxis()->SetTitle("z [cm]");
    htemp->GetYaxis()->SetTitle("y [cm]");
    htemp->SetTitle("");
    std::stringstream EeventNumString;
    EeventNumString << evtNum;
    std::string ePlotCondition;
    for(size_t j = 0; j < idtracks.size(); j++) {
      std::stringstream ecomponentNumber;
      ecomponentNumber << idtracks[j];
      color = selectCompColour(j, numColours);
      pos->SetMarkerColor(color);
      marker = 20;//(j % 34);
      // if( marker < 20) { marker += 20; }
      //if( marker > 34) { marker = 34; }
      pos->SetMarkerStyle(marker);
      pos->SetMarkerSize(0.8);
      ePlotCondition  = "(EvtNum == "  + EeventNumString.str() + ") && ";
      ePlotCondition += "(trackID == " + ecomponentNumber.str() + ") && my > -10000";
      pos->Draw("my:mz",ePlotCondition.c_str(),"same");
    }
    c6->Update();
    c6->SaveAs("MC_yz.png");

  }

  if(dim == 3) {
    TCanvas *c11 = new TCanvas("c11", "MC_Plot3D", 300, 300 );
    grid->Draw("y:x:z","","");
    TH3F *htemp = (TH3F*)gPad->GetPrimitive("htemp");
    htemp->GetXaxis()->SetTitle("z [cm]");
    htemp->GetYaxis()->SetTitle("x [cm]");
    htemp->GetZaxis()->SetTitle("y [cm]");
    htemp->SetTitle("");
    std::stringstream EeventNumString;
    EeventNumString << evtNum;
    std::string ePlotCondition;
    for(size_t j = 0; j < idtracks.size(); j++) {
      std::stringstream ecomponentNumber;
      ecomponentNumber << idtracks[j];
      color = selectCompColour(j, numColours);
      pos->SetMarkerColor(color);
      marker = 20;//(j % 34);
      // if( marker < 20) { marker += 20; }
      //if( marker > 34) { marker = 34; }
      pos->SetMarkerStyle(marker);
      pos->SetMarkerSize(0.8);
      ePlotCondition  = "(EvtNum == "  + EeventNumString.str() + ") && ";
      ePlotCondition += "(trackID == " + ecomponentNumber.str() + ") && my > -10000";
      pos->Draw("my:mx:mz",ePlotCondition.c_str(),"same");
    }

    if(dim == 3) {
      TCanvas *c12 = new TCanvas("c12", "Det_Plot3D", 300, 300 );
      grid->Draw("y:x:z","","");
      TH3F *htemp = (TH3F*)gPad->GetPrimitive("htemp");
      htemp->GetXaxis()->SetTitle("z [cm]");
      htemp->GetYaxis()->SetTitle("x [cm]");
      htemp->GetZaxis()->SetTitle("y [cm]");
      htemp->SetTitle("");
      std::stringstream EeventNumString;
      EeventNumString << evtNum;
      std::string ePlotCondition;
      for(size_t j = 0; j < idtracks.size(); j++) {
	std::stringstream ecomponentNumber;
	ecomponentNumber << idtracks[j];
	color = selectCompColour(j, numColours);
	pos->SetMarkerColor(color);
	marker = 20;//(j % 34);
      // if( marker < 20) { marker += 20; }
      //if( marker > 34) { marker = 34; }
	pos->SetMarkerStyle(marker);
	pos->SetMarkerSize(0.8);
	ePlotCondition  = "(EvtNum == "  + EeventNumString.str() + ") && ";
	ePlotCondition += "(trackID == " + ecomponentNumber.str() + ") && my > -10000";
	pos->Draw("y:x:z",ePlotCondition.c_str(),"same");
      }
    }

    
    if(dim == 3) {
      TCanvas *c13 = new TCanvas("c13", "CC_Plot3D", 300, 300 );
      grid->Draw("y:x:z","","");
      TH3F *htemp = (TH3F*)gPad->GetPrimitive("htemp");
      htemp->GetXaxis()->SetTitle("z [cm]");
      htemp->GetYaxis()->SetTitle("x [cm]");
      htemp->GetZaxis()->SetTitle("y [cm]");
      htemp->SetTitle("");
      std::stringstream EeventNumString;
      EeventNumString << evtNum;
      std::string ePlotCondition;
      for(size_t j = 0; j < nComp; j++) {
	std::stringstream ecomponentNumber;
	ecomponentNumber << j;
	// Set marker and colours per component.
	marker = 20;//(j % 34);

	int idmctr = idMatch[j];
	if(idmctr != -1)
	  color = selectCompColour(idmctr, numColours);
	else{
	  color = 1;
	  marker = badmarker++;;
	}
      //	color = selectCompColour(j, numColours);
	ConComps->SetMarkerColor(color);
	//marker = 20;//(j % 34);
      // if( marker < 20) { marker += 20; }
      //if( marker > 34) { marker = 34; }
	ConComps->SetMarkerStyle(marker);
	ConComps->SetMarkerSize(0.8);
	// Conditions
	ePlotCondition  = "(EvtNum == "  + EeventNumString.str() + ") && ";
	ePlotCondition += "(CompNum == " + ecomponentNumber.str() + ")";
	ConComps->Draw("y_Det:x_Det:z_Det",ePlotCondition.c_str(),"same");
      }
    }
    
  }
	  
 
}
